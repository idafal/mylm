SLID <- SLID[complete.cases(SLID), ]
library(GGally)
ggpairs(car, lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
library(GGally)
ggpairs(SLID, lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
install.packages("car")
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
library(GGally)
ggpairs(SLID, lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
library(GGally)
ggpairs(SLID)
install.packages("car")
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
library(GGally)
ggpairs(SLID)
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
install.packages("GGally")
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
install.packages("GGally")
library(GGally)
ggpairs(SLID)
model1b <- lm(wages ~ education, data = SLID)
print(model1b)
?cat
?print.default
model1 <- mylm(wages ~ education, data = SLID)
model1b <- lm(wages ~ education, data = SLID)
print(model1b)
model1 <- mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%Y
est <- list(terms = terms, model = mf)
est[[length(est)+1]] = beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat(object$est)
}
model1 <- mylm(wages ~ education, data = SLID)
model1 <- mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est[[length(est)+1]] = beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat(object$est)
}
model1 <- mylm(wages ~ education, data = SLID)
print(model1)
print(model1)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat(object$est)
print(object)
}
print(model1)
View(model1)
View(model1b)
View(model1)
model1
model1
modelb
model1b
model1
View(model1)
View(model1b)
model1b$coefficients
model1$model
model1[[3]]
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients = beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat(object$)
}
View(model1)
model1
model1$``
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients = beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
View(model1)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
model1 <- mylm(wages ~ education, data = SLID)
model1$coefficients
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat(object$coefficients)
}
print(model1)
print(model1b)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
print('Coefficients:')
cat(object$coefficients)
}
print(model1)
?format
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
print('Coefficients:')
cat(object$coefficients[1])
}
print(model1)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
print("Coefficients:")
print("Intercept:")
cat(object$coefficients[1])
print("Education:")
cat(object$coefficients[2])
}
print(model1)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
print("Coefficients:")
print("Intercept:")
cat(object$coefficients[1])
cat("\n")
print("Education:")
cat(object$coefficients[2])
}
print(model1)
print(model1b)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
print(Coefficients:)
print("Intercept:")
cat(object$coefficients[1])
cat("\n")
print("Education:")
cat(object$coefficients[2])
}
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat("Coefficients:\nIntercept:")
cat(object$coefficients[1])
cat("\nEducation:")
cat(object$coefficients[2])
}
print(model1)
print.mylm <- function(object, ...){
# Code here is used when print(object) is used on objects of class "mylm"
# Useful functions include cat, print.default and format
cat("Coefficients:\nIntercept: ")
cat(object$coefficients[1])
cat("\nEducation: ")
cat(object$coefficients[2])
}
print(model1)
print(model1b)
View(model1)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = length(y)
p = length(X)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = length(y)
p = length(X)
print(n, p)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm(wages ~ education, data = SLID)
mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = length(y)
p = length(X)
print(n)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = length(y)
p = length(X)
print(p)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = length(y)
p = ncol(X)
print(p)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = nrow(X)
p = ncol(X)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
sigma_sq_hat = (1/(n-p))*t(y-X*beta_hat)*(y-X*beta_hat)
cov_beta_hat = sigma_sq_hat*solve(t(X)%*%X)
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
est$cov <- cov_beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
model1 <- mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = nrow(X)
p = ncol(X)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
sigma_sq_hat = (1/(n-p))*t(y-X%*%beta_hat)%*%(y-X%*%beta_hat)
cov_beta_hat = sigma_sq_hat*solve(t(X)%*%X)
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
est$cov <- cov_beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
model1 <- mylm(wages ~ education, data = SLID)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = nrow(X)
p = ncol(X)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
sigma_sq_hat = (1/(n-p))*t(y-X%*%beta_hat)%*%(y-X%*%beta_hat)
cov_beta_hat = solve(t(X)%*%X)
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
est$cov <- cov_beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
model1 <- mylm(wages ~ education, data = SLID)
View(model1)
mylm <- function(formula, data = list(), contrasts = NULL, ...){
# Extract model matrix & responses
mf <- model.frame(formula = formula, data = data)
X  <- model.matrix(attr(mf, "terms"), data = mf, contrasts.arg = contrasts)
y  <- model.response(mf)
terms <- attr(mf, "terms")
n = nrow(X)
p = ncol(X)
# Add code here to calculate coefficients, residuals, fitted values, etc...
# and store the results in the list est
beta_hat = solve(t(X)%*%X)%*%t(X)%*%y
sigma_sq_hat = (1/(n-p))*t(y-X%*%beta_hat)%*%(y-X%*%beta_hat)
cov_beta_hat = drop(sigma_sq_hat)*solve(t(X)%*%X)
est <- list(terms = terms, model = mf)
est$coefficients <- beta_hat
est$cov <- cov_beta_hat
# Store call and formula used
est$call <- match.call()
est$formula <- formula
# Set class name. This is very important!
class(est) <- 'mylm'
# Return the object with all results
return(est)
}
model1 <- mylm(wages ~ education, data = SLID)
View(model1)
View(model1b)
View(model1b)
q()
summary(model1b)
View(model1)
install.packages("car")
library(car)
data(SLID, package = "carData")
SLID <- SLID[complete.cases(SLID), ]
install.packages("GGally")
library(GGally)
ggpairs(SLID)
q()
